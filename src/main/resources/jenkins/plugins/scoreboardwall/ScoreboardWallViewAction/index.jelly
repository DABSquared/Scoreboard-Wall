<!DOCTYPE html>
<j:jelly xmlns:j="jelly:core">
<j:set var="rootURL" value="${request.contextPath}" />
<html>

  <head>
    <meta charset="utf-8"/>
    <title>ScoreBoard Wall</title>


      <!--<link rel="stylesheet" type="text/css" href="${rootURL}/plugin/scoreboardwall/css/bootstrap.min.css" />-->
      <!--<link rel="stylesheet" type="text/css" href="${rootURL}/plugin/scoreboardwall/css/bootstrap-responsive.min.css" />-->


      <link rel="stylesheet" type="text/css" href="${rootURL}/plugin/scoreboardwall/css/scoreboard.css" />

      <script type="text/javascript" src="${rootURL}/plugin/scoreboardwall/js/jquery-1.10.1.min.js"></script>
      <script type="text/javascript" src="${rootURL}/plugin/scoreboardwall/js/jquery-ui-1.8.18.min.js"></script>
      <script type="text/javascript" src="${rootURL}/plugin/scoreboardwall/js/jquery.timeago.js"></script>
      <script type="text/javascript" src="${rootURL}/plugin/scoreboardwall/js/dateformat.js"></script>

      <!--<script type="text/javascript" src="${rootURL}/plugin/scoreboardwall/js/bootstrap.min.js"></script>-->

  </head>


  <body class="scoreboard xcs toplevel">

      <div class="cc-view" id="root">
        <div id="header" class="cc-header-view chrome cc-view">

        </div>
        <div id="main" class="cc-main-view wrapchrome cc-view">
            <div id="content" class="wrapchrome no-secondary animates">
                <div id="content-inner">
                    <div id="content-primary" class="wrapchrome full-width">
                        <div class="cc-view scoreboard">


                            <div class="cc-view scoreboard-bots">
                                <div class="cc-view scoreboard-list">
                                    <div class="loupeContainer" style="background-size: 100% 1012px; ">
                                        <div id="job1" class="loupe loading  ">
                                            <div class="title reltext" style="z-index: 1; ">
                                                Loading Jobs
                                            </div>
                                            <div class="subtitle reltext" style="z-index: 1; ">
                                            </div>
                                            <div class="sbSpinner"></div></div>

                                    </div>

                                    <div class="itemContainer">

                                    </div>
                                    <div class="fade"></div>
                                </div>


                                <div class="cc-view scoreboard-entity scoreboard-bot-run-entity">
                                    <div class="innerView">
                                        <div class="header">
                                            <h1 class="title reltext animatable" style="z-index: 1; ">Loading Jobs</h1>
                                        </div>

                                        <div class="status">
                                            <div class="bot-run-summary" style="-webkit-transform: translateY(14px) scale(1.136150234741784); ">
                                                <div class="status errors none">
                                                    <div class="count ellipsis reltext" style="z-index: 1; ">

                                                    </div>
                                                    <div class="label ellipsis reltext" style="z-index: 1; ">
                                                        Errors
                                                    </div>
                                                </div>
                                                <div class="status warnings none">
                                                    <div class="count ellipsis reltext" style="z-index: 1; ">

                                                    </div>
                                                    <div class="label ellipsis reltext" style="z-index: 1; ">
                                                    Warnings
                                                    </div>
                                                </div>
                                                <div class="status issues none">
                                                    <div class="count ellipsis reltext" style="z-index: 1; ">

                                                    </div>
                                                    <div class="label ellipsis reltext" style="z-index: 1; ">
                                                        Analysis
                                                    </div>
                                                </div>
                                                <div class="status test-summary none">
                                                    <div class="count ellipsis reltext" style="z-index: 1; ">

                                                    </div>
                                                    <div class="label passed ellipsis reltext" style="z-index: 1; ">
                                                        Passed Tests
                                                    </div>
                                                    <div class="label failed ellipsis reltext" style="z-index: 1; ">
                                                        Failed Tests
                                                    </div>
                                                </div>
                                            </div>
                                        </div>


                                        <div class="commiters">

                                        </div>
                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>
                    <div id="content-secondary" class="wrapchrome">

                    </div>
                </div>
            </div>
        </div>
      </div>


  <script type="text/javascript">

          var jenkinsUrl = "${rootURL}";
          var viewName = "All";

          var jenkinsTimeOut =  15000;
          var lastJenkinsTimeOut = jenkinsTimeOut;

          var jenkinsUpdateInterval = 20000;
          var lastJenkinsUpdateInterval = jenkinsUpdateInterval;

          var showDisabledBuilds = true;

          var serverTime;
          var jobsToDisplay = new Array();

          var displayedIndex = 0;



          var updateRunning = new Array();




          <![CDATA[

          jQuery(document).ready(function(){
              getJenkinsApi(jenkinsUrl)
              setInterval(function() { getJenkinsApi(jenkinsUrl) }, 20000);
              setInterval(rotate, 8000);
          });


          function rotate() {

              if(jobsToDisplay.length == 0) {
                  displayedIndex = 0;
                  return;
              }

              if(jobsToDisplay.length == 1) {
                  displayedIndex = 0;
                  return;
              }

              var indexToRotateDown = displayedIndex;
              var indexToBringUp = displayedIndex+1;
              if(indexToBringUp >= jobsToDisplay.length) {
                  indexToBringUp = 0;
              }

              jQuery("#job"+indexToRotateDown ).fadeOut('fast', function() {
                  jQuery("#job"+indexToRotateDown).remove();
                  var html = getSubItemsHtml(indexToRotateDown,jobsToDisplay.length);
                  jQuery(".itemContainer").append(html);
              });


              jQuery("#job"+indexToBringUp).fadeOut('fast', function() {
                  jQuery("#job"+indexToBringUp).remove();
                  jQuery(".scoreboard-list-item").each( function(index, item){
                      var topHeight = 6 + (index * 5);
                      item.style.top = topHeight + "vw";
                  });
                  var html = getTopItemHtml(indexToBringUp);
                  jQuery(".loupeContainer").html(html);
              });


              displayedIndex = indexToBringUp;
              updateJob(indexToBringUp);

          }



          /************** API Calls **********************/

          function getJenkinsApi(jenkinsUrl) {

              updateRunning[viewName] = true;

              //- get jenkins api ------------------------------------------------
              jQuery.ajax({
                  url: jenkinsUrl +  "/view/" + viewName + "/api/json",
                  dataType: 'json',
                  data: {
                      "depth": 1
                  },
                  success: function(viewApi, textStatus, jqXHR) {
                      var dateHeader = jqXHR.getResponseHeader("Date");
                      var date = new Date(dateHeader);
                      serverTime = date.getTime();

                      var jobNames = getJobNamesToDisplay(viewApi);

                      if(jobNames.length == 0) {
                          setNoJobs();
                      }

                      getJobs(jobNames);

                      updateRunning[viewName] = false;
                  },
                  error: function(e, xhr) {
                      jobsToDisplay = new Array();

                      updateRunning[viewName] = false;
                  },
                  timeout: jenkinsTimeOut
              });
          }


          function getJobs(jobNames)
          {
              updateRunning["repaint"] = true;
              jQuery.each(jobsToDisplay, function(index, job) {
                  job.visited = false;
              });
              updateRunning["repaint"] = false;

              jQuery.each(jobNames, function(index, jobName) {
                  if (!updateRunning[jobName])
                  {
                      updateRunning[jobName] = true;

                      jQuery.ajax({
                          url: jenkinsUrl +  "/job/" + jobName + "/api/json",
                          dataType: "json",
                          data: {
                              "tree": "property[wallDisplayName],name,color,lastBuild[number,timestamp,duration,actions[claimed,claimedBy,failCount,skipCount,totalCount],culprits[fullName,property[address]]],lastSuccessfulBuild[duration]"
                          },
                          success: function(job, textStatus, jqXHR) {

                              var add = true;
                              jQuery.each(jobsToDisplay, function(index, oldJob) {
                                  if (oldJob.name == job.name)
                                  {
                                      job.visited = true;
                                      jobsToDisplay[index] = job;
                                      add = false;
                                  }

                              });

                              if(!showDisabledBuilds && job.color === 'disabled') {
                                  add = false;
                              }

                              if (add)
                              {
                                  jobsToDisplay[jobsToDisplay.length] = job;
                                  addJob(jobsToDisplay.length-1);
                              } else {
                                  updateJob(jobsToDisplay.length-1);
                              }


                              updateRunning[jobName] = false;
                          },
                          error: function(e, xhr) {
                              updateRunning[jobName] = false;
                          },
                          timeout: jenkinsTimeOut
                      });
                  }
              });
          }



          /********* Helper Functions **************/



          /**
           * Takes in an array of job names from getJenkinsApi()
           * @param viewApi An object from the getJenkinsApi()
           * @returns {Array}
           */
          function getJobNamesToDisplay(viewApi)
          {
              var jobNames = new Array();

              jQuery.each(viewApi.jobs, function(index, job) {
                  jobNames.push(job.name);
              });

              if (viewApi.views != null && viewApi.views.length)
              {
                  jQuery.each(viewApi.views, function(index, nestedView) {
                      jQuery.each(nestedView.jobs, function(index, job) {
                          jobNames.push(job.name);
                      });
                  });
              }


              return jobNames;
          }


          function getTopItemHtml(arrayIndex) {
              var data = jobsToDisplay[arrayIndex];

              var timestring = "Never Built";

              if(data['lastBuild']) {
                  if(data['lastBuild']['timestamp']) {
                      var today = new Date();
                      var date = new Date(data['lastBuild']['timestamp']);
                      if(today.toDateString() == date.toDateString()) {
                          timestring = date.format('shortTime');

                      } else {
                          timestring = date.format('m/dd/yy');
                      }
                  }
              }

              var html = '<div class="loupe '+ getClassForColor(data['color']) +'  " id="job'+ arrayIndex +'" ><div style="z-index: 1; " class="title reltext">'+data['name']+'</div><div style="z-index: 1; " class="subtitle reltext">'+ timestring +'</div><div class="sbSpinner"></div></div>';
              return html;
          }


          function getSubItemsHtml(arrayIndex, newIndex) {
              var data = jobsToDisplay[arrayIndex];
              var topHeight = 1 + (newIndex * 5);

              var timestring = "Never Built";

              if(data['lastBuild']) {
                  if(data['lastBuild']['timestamp']) {
                      var today = new Date();
                      var date = new Date(data['lastBuild']['timestamp']);
                      if(today.toDateString() == date.toDateString()) {
                          timestring = date.format('shortTime');

                      } else {
                          timestring = date.format('m/dd/yy');
                      }
                  }
              }



              var html = '<div id="job'+ arrayIndex +'" class="'+ getClassForColor(data['color']) +' cc-view scoreboard-list-item scoreboard-bot-run-list-item" style="-webkit-transform: translate3d(0px, 97px, 0px); opacity: 1; top:'+ topHeight+'vw;"><div class="icon"></div><div class="title reltext">'+data['name']+'</div><div class="subtitle reltext">'+ timestring +'</div><div class="sbSpinner"> </div></div>';
              return html;
          }

          function setNoJobs() {
              var html = '<div class="loupe " id="noJobs" ><div style="z-index: 1; " class="title reltext">No Jobs</div><div style="z-index: 1; " class="subtitle reltext"></div><div class="sbSpinner"></div></div>';
              jQuery(".scoreboard-entity .innerView .header .title").html("No Jobs");

              jQuery(".loupeContainer").html(html);
          }

          function addJob(arrayIndex) {
              if(arrayIndex == 0) {
                  var html = getTopItemHtml(arrayIndex);
                  jQuery(".loupeContainer").html(html);
              } else {
                  var html = getSubItemsHtml(arrayIndex,arrayIndex);
                  jQuery(".itemContainer").append(html);
              }
              updateJob(arrayIndex);
          }


          function updateJob(arrayIndex) {
              var data = jobsToDisplay[arrayIndex];
              jQuery("job" + arrayIndex).removeClass("fail").removeClass("success").removeClass("success").removeClass("loading").addClass(getClassForColor(data['color']));

              if(displayedIndex == arrayIndex) {
                  loadDataToTheRight(arrayIndex);
              }
          }

          function loadDataToTheRight(arrayIndex) {
              var data = jobsToDisplay[arrayIndex];

              var titleString = "";

              if(data['lastBuild']) {
                  titleString = "Last Build #" + data['lastBuild']['number'];
              } else {
                  titleString = "Never Built";
              }

              jQuery(".scoreboard-entity .innerView .header .title").html(titleString);

          }


          function getClassForColor(color) {
              if(color == "grey" || color == "disabled"|| color == "notbuilt") {
                  return "disabled";
              } else if(color == "red" || color == "aborted") {
                  return "fail";
              } else if(color == "blue") {
                  return "success";
              } else if (color == "red_anime" || color == "yellow_anime" ||color == "blue_anime" ||color == "grey_anime" || color == "disabled_anime" ||color == "aborted_anime" ||color == "notbuilt_anime") {
                  return "loading";
              } else {
                  return "warning";
              }
          }
//          {"name":"Curveu iOS","color":"blue","lastBuild":{"actions":[{},{},{},{}],"duration":530678,"number":36,"timestamp":1367011909000,"culprits":[]},"lastSuccessfulBuild":{"duration":530678},"property":[]}

          ]]>


      </script>
  </body>

</html>
</j:jelly>